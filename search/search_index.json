{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BobaDocs for Boba Bots 253 Learn Git Software Resources Welcome \u00b6 to the programming training document for Boba Bots 253. This document is updated for the FRC 2020 game Infinite Recharge . We are moving at a significantly faster pace than engineering courses offered at the school, and it's okay to get stuck or not know something. The team veterans are here to help, please ask us questions! Other \u00b6 Looking for the Electronics Training Document? - Electronics Documentation Attention WPILib has significantly changed their code structure for 2020. See the New for 2020 Documentation for more details.","title":"Home"},{"location":"#welcome","text":"to the programming training document for Boba Bots 253. This document is updated for the FRC 2020 game Infinite Recharge . We are moving at a significantly faster pace than engineering courses offered at the school, and it's okay to get stuck or not know something. The team veterans are here to help, please ask us questions!","title":"Welcome"},{"location":"#other","text":"Looking for the Electronics Training Document? - Electronics Documentation Attention WPILib has significantly changed their code structure for 2020. See the New for 2020 Documentation for more details.","title":"Other"},{"location":"frc-competition-overview/","text":"What is FIRST Robotics? \u00b6 FIRST (For Inspiration and Recognition of Science and Technology) Robotics is an organization that holds international high school robotics competitions. Each year, teams of students are challenged to raise funds, design a team brand, and engineer an industrial-sized robot to compete in a field game against other teams. Teams can also have mentors, who are professionals that volunteer and lend their expertise to guide the team. \u201cIt\u2019s as close to real-world engineering as a student can get.\u201d - FIRST Website What Is The First Robotics Competition? \u00b6 History \u00b6 The FIRST Robotics Competition was founded in 1989 by inventor and entrepreneur Dean Kamen and retired MIT professor Woodie Flowers. Dean Kamen was unhappy with the number of women and minorities who did not consider STEM (Science, Technology, Engineering, Mathematics) careers. The first competition season was held in 1992. Woodie Flowers (left) and Dean Kamen (right). FRC Pathway \u00b6 The FIRST Organization also holds competitions for students of varying ages. These include the... FIRST Lego League Junior: grades K-4 FIRST Lego League (FLL): grades 4-8 FIRST Tech Challenge (FTC): grades 7-12 FIRST Robotics Challenge (FRC): grades 9-12 (that's us!) Events \u00b6 There are two competition models which a team can opt into: regional and district competitions. Regionals: Teams begin by signing up for and competing in one or more regional competitions. Any team can attend a regional, and it usually houses 40-70 teams. By winning regionals, each team in the winning alliance (group of three teams) receives a ticket to the championships. (We use the regional model.) District: Compared to regionals, district competitions are smaller in scale, and entry is limited by geographic location. Instead of the winners ascending to the championships, teams compete for points in district competitions. Those with the most points attend the district championship event, and teams with the most points receive tickets to the championships. District competitions are more abundant and are cheaper than regionals, and teams are able to attend more events and play more matches. Championships: Teams from all over the world meet at the championship event and compete. The winner is automatically given a ticket to the next year\u2019s championship. Past championships were held in cities such as Houston, Detroit, and St. Louis. Competition events will oftentimes include extra activities for members to participate in. These include workshops and panels , where students and mentors present and discuss FRC related topics. Competition is also expensive (transportation, food, housing, sign-up fees, etc.), so teams spend time fundraising throughout the year. Winners for both regional and championship competitions, as well as select awards are awarded with a blue banner. Other Events \u00b6 Community Events: Aside from regional and championship events, members in the community also hold their own competition events. Examples include... Chezy Champs, hosted by Team 254 (Bellarmine College Preparatory, San Jose) MadTown Throwdown, hosted by Team 1323 CalGames, hosted by the Western Regional Robotics Forum Fun Fact During the 2019 season, nearly 100,000 high school students on 3,940 FIRST Robotics Competition teams will compete in 100 District Events, 11 District Championships, and 62 Regional Events. FIRST Philosophies & Core Values \u00b6 FIRST has two main philosophies which it encourages its members to adopt not only during the time they spend in the program, but into their own lives. Gracious Professionalism (GP) \u00b6 Gracious Professionalism is a way of doing things that encourages high-quality work, emphasizes the value of others, and respects individuals and the community. People who practice Gracious Professionalism learn how to both compete fiercely, while also respecting and being kind to others. \u201cThey avoid treating anyone like losers. Knowledge, competition, and empathy are comfortably blended.\u201d - FIRST Website Coopertition \u00b6 Coopertition is displaying unqualified kindness and respect in the face of fierce competition. The idea is founded on the philosophy that teams can and should help and cooperate with each other even as they compete. Coopertition involves both learning from and teaching teammates. It is learning from mentors, both managing and being managed. FIRST Core Values \u00b6 To learn more about the FRC, check out the FAQ here .","title":"FRC Competition Overview"},{"location":"frc-competition-overview/#what-is-first-robotics","text":"FIRST (For Inspiration and Recognition of Science and Technology) Robotics is an organization that holds international high school robotics competitions. Each year, teams of students are challenged to raise funds, design a team brand, and engineer an industrial-sized robot to compete in a field game against other teams. Teams can also have mentors, who are professionals that volunteer and lend their expertise to guide the team. \u201cIt\u2019s as close to real-world engineering as a student can get.\u201d - FIRST Website","title":"What is FIRST Robotics?"},{"location":"frc-competition-overview/#what-is-the-first-robotics-competition","text":"","title":"What Is The First Robotics Competition?"},{"location":"frc-competition-overview/#history","text":"The FIRST Robotics Competition was founded in 1989 by inventor and entrepreneur Dean Kamen and retired MIT professor Woodie Flowers. Dean Kamen was unhappy with the number of women and minorities who did not consider STEM (Science, Technology, Engineering, Mathematics) careers. The first competition season was held in 1992. Woodie Flowers (left) and Dean Kamen (right).","title":"History"},{"location":"frc-competition-overview/#frc-pathway","text":"The FIRST Organization also holds competitions for students of varying ages. These include the... FIRST Lego League Junior: grades K-4 FIRST Lego League (FLL): grades 4-8 FIRST Tech Challenge (FTC): grades 7-12 FIRST Robotics Challenge (FRC): grades 9-12 (that's us!)","title":"FRC Pathway"},{"location":"frc-competition-overview/#events","text":"There are two competition models which a team can opt into: regional and district competitions. Regionals: Teams begin by signing up for and competing in one or more regional competitions. Any team can attend a regional, and it usually houses 40-70 teams. By winning regionals, each team in the winning alliance (group of three teams) receives a ticket to the championships. (We use the regional model.) District: Compared to regionals, district competitions are smaller in scale, and entry is limited by geographic location. Instead of the winners ascending to the championships, teams compete for points in district competitions. Those with the most points attend the district championship event, and teams with the most points receive tickets to the championships. District competitions are more abundant and are cheaper than regionals, and teams are able to attend more events and play more matches. Championships: Teams from all over the world meet at the championship event and compete. The winner is automatically given a ticket to the next year\u2019s championship. Past championships were held in cities such as Houston, Detroit, and St. Louis. Competition events will oftentimes include extra activities for members to participate in. These include workshops and panels , where students and mentors present and discuss FRC related topics. Competition is also expensive (transportation, food, housing, sign-up fees, etc.), so teams spend time fundraising throughout the year. Winners for both regional and championship competitions, as well as select awards are awarded with a blue banner.","title":"Events"},{"location":"frc-competition-overview/#other-events","text":"Community Events: Aside from regional and championship events, members in the community also hold their own competition events. Examples include... Chezy Champs, hosted by Team 254 (Bellarmine College Preparatory, San Jose) MadTown Throwdown, hosted by Team 1323 CalGames, hosted by the Western Regional Robotics Forum Fun Fact During the 2019 season, nearly 100,000 high school students on 3,940 FIRST Robotics Competition teams will compete in 100 District Events, 11 District Championships, and 62 Regional Events.","title":"Other Events"},{"location":"frc-competition-overview/#first-philosophies-core-values","text":"FIRST has two main philosophies which it encourages its members to adopt not only during the time they spend in the program, but into their own lives.","title":"FIRST Philosophies &amp; Core Values"},{"location":"frc-competition-overview/#gracious-professionalism-gp","text":"Gracious Professionalism is a way of doing things that encourages high-quality work, emphasizes the value of others, and respects individuals and the community. People who practice Gracious Professionalism learn how to both compete fiercely, while also respecting and being kind to others. \u201cThey avoid treating anyone like losers. Knowledge, competition, and empathy are comfortably blended.\u201d - FIRST Website","title":"Gracious Professionalism (GP)"},{"location":"frc-competition-overview/#coopertition","text":"Coopertition is displaying unqualified kindness and respect in the face of fierce competition. The idea is founded on the philosophy that teams can and should help and cooperate with each other even as they compete. Coopertition involves both learning from and teaching teammates. It is learning from mentors, both managing and being managed.","title":"Coopertition"},{"location":"frc-competition-overview/#first-core-values","text":"To learn more about the FRC, check out the FAQ here .","title":"FIRST Core Values"},{"location":"contributing/contresources/","text":"Contributing Resources \u00b6 Markdown \u00b6 The entire site is based on Markdown. I've found this cheatsheet to be very useful for writing Markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet MkDocs \u00b6 The site is generated with MkDocs, which converts the written Markdown to a fully fleshed website. You can find more information about MkDocs here: https://www.mkdocs.org/ ReadTheDocs \u00b6 This site is hosted on ReadTheDocs, which also handles the conversion of Markdown to HTML with MkDocs. The homepage for ReadTheDocs is located here: https://readthedocs.org/ . I suggest checking the Getting Started Guide for information about how to use this service. Material Theme \u00b6 This site uses the Material Design theme for MkDocs. You can find more information about the Material theme here: https://squidfunk.github.io/mkdocs-material/ Markdown Extensions \u00b6 In addition to default Markdown, the site also uses some extensions to provide additional functionality. All the enabled extensions can be found in the markdown_extensions list in mkdocs.yml . Currently, information about all the extensions we use can be found here: https://squidfunk.github.io/mkdocs-material/reference/admonitions/ If you add an extension that requires a new Python package to be installed, be sure to add that package to requirements.txt .","title":"Contributing Resources"},{"location":"contributing/contresources/#contributing-resources","text":"","title":"Contributing Resources"},{"location":"contributing/contresources/#markdown","text":"The entire site is based on Markdown. I've found this cheatsheet to be very useful for writing Markdown: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet","title":"Markdown"},{"location":"contributing/contresources/#mkdocs","text":"The site is generated with MkDocs, which converts the written Markdown to a fully fleshed website. You can find more information about MkDocs here: https://www.mkdocs.org/","title":"MkDocs"},{"location":"contributing/contresources/#readthedocs","text":"This site is hosted on ReadTheDocs, which also handles the conversion of Markdown to HTML with MkDocs. The homepage for ReadTheDocs is located here: https://readthedocs.org/ . I suggest checking the Getting Started Guide for information about how to use this service.","title":"ReadTheDocs"},{"location":"contributing/contresources/#material-theme","text":"This site uses the Material Design theme for MkDocs. You can find more information about the Material theme here: https://squidfunk.github.io/mkdocs-material/","title":"Material Theme"},{"location":"contributing/contresources/#markdown-extensions","text":"In addition to default Markdown, the site also uses some extensions to provide additional functionality. All the enabled extensions can be found in the markdown_extensions list in mkdocs.yml . Currently, information about all the extensions we use can be found here: https://squidfunk.github.io/mkdocs-material/reference/admonitions/ If you add an extension that requires a new Python package to be installed, be sure to add that package to requirements.txt .","title":"Markdown Extensions"},{"location":"contributing/contributing/","text":"Contributing \u00b6 There are always going to be improvements, fixes, and updates that can be made to our documentation. It's up to team members to make these changes. Detailed in this section is how you can help with these efforts. Setup \u00b6 The following contributing steps assume that you have basic knowledge of Markdown , Python , Terminal , and Github . See Contributing Resources for more details. Although you can directly edit the Markdown file on Github (e.g. quick file changes), it is recommended to setup a proper development environment to work on the website. Auto-reload is supported to give a preview of your local changes before pushing to Github. Tip If you are not familiar with python, editing via a Docker Container is also supported. However, it has not yet been setup for this repository. See MkDocs-Material: Alternative Using Docker for more information.","title":"Introduction"},{"location":"contributing/contributing/#contributing","text":"There are always going to be improvements, fixes, and updates that can be made to our documentation. It's up to team members to make these changes. Detailed in this section is how you can help with these efforts.","title":"Contributing"},{"location":"contributing/contributing/#setup","text":"The following contributing steps assume that you have basic knowledge of Markdown , Python , Terminal , and Github . See Contributing Resources for more details. Although you can directly edit the Markdown file on Github (e.g. quick file changes), it is recommended to setup a proper development environment to work on the website. Auto-reload is supported to give a preview of your local changes before pushing to Github. Tip If you are not familiar with python, editing via a Docker Container is also supported. However, it has not yet been setup for this repository. See MkDocs-Material: Alternative Using Docker for more information.","title":"Setup"},{"location":"contributing/updating/","text":"Updating the Documentation \u00b6 Keep the Documentation Up to Date","title":"Up to Date"},{"location":"contributing/updating/#updating-the-documentation","text":"Keep the Documentation Up to Date","title":"Updating the Documentation"},{"location":"contributing/with-python/","text":"Contributing \u00b6 Installing Software \u00b6 Python 3 \u00b6 If you do not have Python installed, download it from the official website and follow its install instructions: https://www.python.org/downloads/ Tip Make sure to add python to PATH during the install process, it makes life a bit easier. A TextEditor such as Sublime Text 3 or some other text editor is highly recommended. Source Code \u00b6 Clone the bobadocs repository from Github. https://github.com/MillsRoboticsTeam253/bobadocs.git Python Dependencies \u00b6 This site uses the MkDocs Python package to convert Markdown files to a website, and a few more packages to provide additional functionality and theming. You can install all the necessary dependencies by running pip install -r requirements.txt while in the root directory of the repository. Alternatively, run the following in the repository's root directory. pip install mkdocs mkdocs-material pymdown-extensions mkdocs-git-revision-date-plugin or, to install each dependency individually pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install mkdocs-git-revision-date-plugin Development Workflow \u00b6 Local Changes \u00b6 To develop locally, run mkdocs serve in the root directory of the project. This will generate a local version of the website from the code at http://127.0.0.1:8000/ and will autorefresh whenever changes are made in docs/. Adding or modifying the documentation is fairly simple, each page of the website is contained within its own .md file. Adding new pages are as simple as creating new .md files Make sure your Markdown files are placed in the correct subfolders. For example, javabasics.md should be placed in the Intro to Java folder in the repository. This helps others find your documentation later when they want to edit or add information. Page settings are configured in the mkdocs.yml YAML file. All the settings have already been setup for you, simply edit the nav section when making changes Attention Do not forget to add new .md pages to the nav section of mkdocs.yml . New pages not added to the YAML configuration file will not show up on the document. When you are happy with your changes/additions, run mkdocs build --clean to build the site. This will create a site/ directory within the repository. The .gitignore file has been setup so that the local build will not be pushed to Github. Proofread your documentation and make sure that your documentation displays as intended. Hint The purpose of writing documentation is to pass down knowledge to current and future team members. Make sure your documentation is clear and understandable. Add pictures to illustrate your explanations. Adding too much detail is sometimes as bad as putting nothing there in the first place. Push changes to Github \u00b6 All Done? Simply push/merge it to the master branch of the bobadocs repository. ReadTheDocs will automatically update the clone the bobadocs repository and update the documentation within a few minutes. Fail If the readthedocs site does not update within a few minutes of your Github push, it is likely that the virtual python docs compiler has failed build. Check your local changes for syntax errors and push again. If the issue occurs again, ask your programming lead to check the readthedocs build logs.","title":"With Python"},{"location":"contributing/with-python/#contributing","text":"","title":"Contributing"},{"location":"contributing/with-python/#installing-software","text":"","title":"Installing Software"},{"location":"contributing/with-python/#python-3","text":"If you do not have Python installed, download it from the official website and follow its install instructions: https://www.python.org/downloads/ Tip Make sure to add python to PATH during the install process, it makes life a bit easier. A TextEditor such as Sublime Text 3 or some other text editor is highly recommended.","title":"Python 3"},{"location":"contributing/with-python/#source-code","text":"Clone the bobadocs repository from Github. https://github.com/MillsRoboticsTeam253/bobadocs.git","title":"Source Code"},{"location":"contributing/with-python/#python-dependencies","text":"This site uses the MkDocs Python package to convert Markdown files to a website, and a few more packages to provide additional functionality and theming. You can install all the necessary dependencies by running pip install -r requirements.txt while in the root directory of the repository. Alternatively, run the following in the repository's root directory. pip install mkdocs mkdocs-material pymdown-extensions mkdocs-git-revision-date-plugin or, to install each dependency individually pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install mkdocs-git-revision-date-plugin","title":"Python Dependencies"},{"location":"contributing/with-python/#development-workflow","text":"","title":"Development Workflow"},{"location":"contributing/with-python/#local-changes","text":"To develop locally, run mkdocs serve in the root directory of the project. This will generate a local version of the website from the code at http://127.0.0.1:8000/ and will autorefresh whenever changes are made in docs/. Adding or modifying the documentation is fairly simple, each page of the website is contained within its own .md file. Adding new pages are as simple as creating new .md files Make sure your Markdown files are placed in the correct subfolders. For example, javabasics.md should be placed in the Intro to Java folder in the repository. This helps others find your documentation later when they want to edit or add information. Page settings are configured in the mkdocs.yml YAML file. All the settings have already been setup for you, simply edit the nav section when making changes Attention Do not forget to add new .md pages to the nav section of mkdocs.yml . New pages not added to the YAML configuration file will not show up on the document. When you are happy with your changes/additions, run mkdocs build --clean to build the site. This will create a site/ directory within the repository. The .gitignore file has been setup so that the local build will not be pushed to Github. Proofread your documentation and make sure that your documentation displays as intended. Hint The purpose of writing documentation is to pass down knowledge to current and future team members. Make sure your documentation is clear and understandable. Add pictures to illustrate your explanations. Adding too much detail is sometimes as bad as putting nothing there in the first place.","title":"Local Changes"},{"location":"contributing/with-python/#push-changes-to-github","text":"All Done? Simply push/merge it to the master branch of the bobadocs repository. ReadTheDocs will automatically update the clone the bobadocs repository and update the documentation within a few minutes. Fail If the readthedocs site does not update within a few minutes of your Github push, it is likely that the virtual python docs compiler has failed build. Check your local changes for syntax errors and push again. If the issue occurs again, ask your programming lead to check the readthedocs build logs.","title":"Push changes to Github"},{"location":"programming/collaboration/","text":"Git and Github \u00b6 git is a tool our software team uses to collaborate Intro to git Github Practices \u00b6 The following is a set of guidelines for contributing on Github for our team. These are guidelines, not hard rules. The master branch is for competition ready code only. Do not use master for testing. The development branch should consist of relatively recent development code. Experimental code should be branched off of here. Merge into the development branch if your code is deployable and tested. If writing test code, create a new branch or add onto another. The README should be updated with useful information about the repository or programming team (ie. branch descriptions, checklists, etc.) Write useful commit messages; Describe what changes you made. (<action>, <changes>) is a good format. For example, \"add initial drivetrain logic\" is good, \"robot drive haha yes\" is not good. Keep commit messages in present-tense. ie: \"Added shooter PID\" should instead be \"Add shooter PID\"","title":"Collaboration"},{"location":"programming/collaboration/#git-and-github","text":"git is a tool our software team uses to collaborate Intro to git","title":"Git and Github"},{"location":"programming/collaboration/#github-practices","text":"The following is a set of guidelines for contributing on Github for our team. These are guidelines, not hard rules. The master branch is for competition ready code only. Do not use master for testing. The development branch should consist of relatively recent development code. Experimental code should be branched off of here. Merge into the development branch if your code is deployable and tested. If writing test code, create a new branch or add onto another. The README should be updated with useful information about the repository or programming team (ie. branch descriptions, checklists, etc.) Write useful commit messages; Describe what changes you made. (<action>, <changes>) is a good format. For example, \"add initial drivetrain logic\" is good, \"robot drive haha yes\" is not good. Keep commit messages in present-tense. ie: \"Added shooter PID\" should instead be \"Add shooter PID\"","title":"Github Practices"},{"location":"programming/faq/","text":"This section outlines commonly asked questions about the robot's code VSCode \u00b6 What is \"vendordeps\"? \u00b6 The vendordeps/ folder in our robot code contains .json files that identify third party libraries we use. You can read more about it here .","title":"FAQ"},{"location":"programming/faq/#vscode","text":"","title":"VSCode"},{"location":"programming/faq/#what-is-vendordeps","text":"The vendordeps/ folder in our robot code contains .json files that identify third party libraries we use. You can read more about it here .","title":"What is \"vendordeps\"?"},{"location":"programming/git-flow/","text":"Read about the Github flow here . When you are done reading, let's practice using the Github flow a bit. We'll be using the TrainingRobot repo from the previous section to do this. On the left side of the bottom bar in VSCode, click on \"master\" and then \"+ Create new branch\" and name it whatever you want. Stage, commit, and push the changes you made in the previous pages. (You may want to refer back to the Version Control page of Intro to Git to refresh on how to do that). Go to the repo for the TrainingRobot on Github and create a new pull request with the branch you just created. (make sure you're logged in) In the pull request, people can add comments, review the code, and merge the code into our master branch. This is how we make sure all the code that we put on our robot works and meets our quality standards. We won't be merging your code in this time around, but let a programming lead or mentor know once you get to this step so we can check you off.","title":"Git Flow"},{"location":"programming/intro-to-robot-code/","text":"Setup \u00b6 In order to write and run robot code, we will need to install a few pieces of software. WPILib \u00b6 The WPILib suite installs the IDE we write our code in as well as the tools needed to run and deploy that code to the robot. Follow the instructions on the official WPILib documentation for your respective OS. This will install WPILib and all its required tooling, as well as the VSCode IDE that we use to write code. Git and Github \u00b6 We use Git and Github to keep track of and collaborate on code. Follow the instructions for your respective OS to download Git . If you do not have a Github account, create one now. Once you have your account, tell a programming mentor or programming lead your username so they may add you to our GitHub organization . Next, set up your username (your real name) and email in Git by following these instructions: Setting your username in Git Setting your email address in Git Creating a robot project \u00b6 With VSCode \u00b6 Bring up the Visual Studio Code command palette with Control+Shift+P: Then, type \u201cWPILib\u201d into the prompt. Since all WPILib commands start with \u201cWPILib,\u201d this will bring up the list of WPILib-specific VS Code commands: Now, select the \u201cCreate a new project\u201d command: This will bring up the \u201cNew Project Creator Window:\u201d Some elements we care about are explained below: Project Type : The kind of project we wish to create. Usually we want template . Language : The language (C++ or Java) that will be used for this project. We will be using Java . Project Base : The base class or example to generate the project from. Our team uses Command Robot . You can find the templates here and examples here . Project Location : This determines the folder in which the robot project will be located. Create New Folder : If this is checked, a new folder will be created to hold the project within the previously-specified folder. If it is not checked, the project will be located directly in the previously-specified folder. An error will be thrown if the folder is not empty and this is not checked. You almost always want this to be checked. Project Name : The name of the robot project. This also specifies the name that the project folder will be given if the Create New Folder box is checked. Our code for each year is named with the format Code<year> ie: Code2020 . Team Number : The team number for the project, which will be used for package names within the project and to locate the robot when deploying code. Our team number is 253 . Once all the above have been configured, click \u201cGenerate Project\u201d and the robot project will be created. Opening The New Project \u00b6 After successfully creating your project, VS Code will give the option of opening the project as shown below. We can choose to do that now or later by typing Ctrl + K then Ctrl + O (or just Cmd + O on macOS) and select the folder where we saved our project. Once opened, we will see the project hierarchy on the left. Double-clicking on a file will open that file in the editor. Project Structure \u00b6 A typical robot project may look like this : Code2020/ \u251c\u2500\u2500 build.gradle \u251c\u2500\u2500 gradle/ \u251c\u2500\u2500 gradlew \u251c\u2500\u2500 gradlew.bat \u251c\u2500\u2500 settings.gradle \u251c\u2500\u2500 src/main/java/frc/robot/ \u2502 \u251c\u2500\u2500 Constants.java \u2502 \u251c\u2500\u2500 Main.java \u2502 \u251c\u2500\u2500 Robot.java \u2502 \u251c\u2500\u2500 RobotContainer.java \u2502 \u251c\u2500\u2500 commands/ \u2502 \u2502 \u251c\u2500\u2500 ConveyorQueue.java \u2502 \u2502 \u251c\u2500\u2500 Drive.java \u2502 \u2502 \u251c\u2500\u2500 Shoot.java \u2502 \u2502 \u2514\u2500\u2500 VisionTrack.java \u2502 \u2514\u2500\u2500 subsystems/ \u2502 \u251c\u2500\u2500 Arm.java \u2502 \u251c\u2500\u2500 Climber.java \u2502 \u251c\u2500\u2500 Conveyor.java \u2502 \u251c\u2500\u2500 Drivetrain.java \u2502 \u251c\u2500\u2500 Intake.java \u2502 \u2514\u2500\u2500 Shooter.java \u2514\u2500\u2500 vendordeps/ \u251c\u2500\u2500 Phoenix.json \u251c\u2500\u2500 REVColorSensorV3.json \u251c\u2500\u2500 REVRobotics.json \u251c\u2500\u2500 WPILibNewCommands.json \u251c\u2500\u2500 WPILibOldCommands.json \u2514\u2500\u2500 navx_frc.json It's a lot, so let's break it down. This is an intro to our robot structure, so we won't go into specifics on how to actually write the code until the next section. Gradle \u00b6 When creating a robot project, Gradle will automatically generate the files build.gradle , gradle/ , gradlew , gradlew.bat , settings.gradle . You shouldn't ever need to touch these. Your IDE may also generate the folders bin/ , build/ , .wpilib/ , .vscode/ , and .idea/ . It's safe to ignore these files as well. vendordeps \u00b6 The vendordeps/ folder in our robot code contains .json files that identify third party libraries we use. You can read more about it here . src \u00b6 Just like any other Java project, the src/ directory holds all of our actual code. src/main/java/frc/robot/ \u251c\u2500\u2500 Constants.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Robot.java \u251c\u2500\u2500 RobotContainer.java \u251c\u2500\u2500 commands/ \u2502 \u251c\u2500\u2500 ConveyorQueue.java \u2502 \u251c\u2500\u2500 Drive.java \u2502 \u251c\u2500\u2500 Shoot.java \u2502 \u2514\u2500\u2500 VisionTrack.java \u2514\u2500\u2500 subsystems/ \u251c\u2500\u2500 Arm.java \u251c\u2500\u2500 Climber.java \u251c\u2500\u2500 Conveyor.java \u251c\u2500\u2500 Drivetrain.java \u251c\u2500\u2500 Intake.java \u2514\u2500\u2500 Shooter.java Main.java \u00b6 This file is autogenerated, and there is rarely any reason to touch this file at all. It contains the classic main method, which is run at startup and starts up the rest of the robot code. Robot.java \u00b6 This file is the control center of the robot. It has the methods that are called to run the robot. Documentation on each of the methods within it can be found here . Constants.java \u00b6 This file contains all the numbers that don't change and are relevant to the whole robot. This includes all ports and joystick buttons, which correlate to motor controllers, solenoids, and commands in the code. RobotContainer.java \u00b6 This is where we create and store the objects for the subsystems, and set up all the controller and joystick commands that the driver uses to operate the robot. It does not extend from any superclasses, and is mainly used as a way to separate code from Robot.java commands/ \u00b6 Commands are what run the robot. For example, there may be a RunIntake command that runs two motors to turn the wheels that intake a game piece. subsystems/ \u00b6 Subsystems are another name for robot mechanisms, such as a drivetrain, a shooter, an intake, or a climber. The subsystem classes contain the Objects for the motor controllers and solenoids and have methods for controlling the subsystem, which are used by commands. Deploying code to the robot \u00b6 Note Deploying code to the RoboRIO only works on a Windows computer; however, you can still build your code to see if it compiles correctly. Now that you've created a robot project, you may want to deploy your code to the robot. In order to do this you'll need a few things: A Windows computer with the driver station software installed A RoboRIO connected to an electronics board (radio optional) and a battery If you do not have the radio, have a USB-B cable handy to connect your computer to the RIO With the radio: Disconnect from your wifi network and connect to the radio's wifi network. Without the radio: Plug the computer into the RoboRIO using a USB-B cable. Now that you're connected, it's time to actually deploy your code. Follow the WPILib instructions to deploy your code to the robot. Writing robot code \u00b6 Now you know how to deploy your code. Let's learn how to interact with physical components of the robot. Javadocs \u00b6 Java has a standard documentation format that is autogenerated from documentation comments in the code. We will be referencing them extensively to write our code. On top of a Javadoc contains a description of the class, its package, what it inherits, and more. Below that is a section containing the class' constructors, and the section below contains the methods you can call from that class. If you click on any of the constructors or methods, you get directed to a section with more details about what you clicked. Here's a Javadoc of a class you should be familiar with: ArrayList . WPILib \u00b6 WPILib is the name of the library FRC provides us to control the robot with. Its JavaDocs are located here (and you can also find a link to them in the Resources page of this site). We will be mostly using the library's edu.wpi.first.wpilibj package, and you can search for a class or method using the search bar located in the top right corner of the javadocs page. Practice \u00b6 First has a pretty good write-up on command-based programming , so we'll read that. Once you're done, we'll practice writing some basic commands. Before you start If you have access to a robot and would like to test your code, you will need the following items: items from the previous section an Xbox controller a Talon SRX a brushless motor Ask your teammates in the electronics department for help :) If you are new to git, read the intro to git section before proceeding. Clone the TrainingRobot project , and open it in VSCode. You can check if you have got the right project open by deploying the project to the robot and pressing the X button on the controller. If the motor spins, you've got the right code! Note VSCode may prompt you to \"import project to 2020\". Don't do this. Warning Please don't actually push any of your changes to the Github repository. Part 1: Basic IO \u00b6 Let's change the button to trigger the command continuously while it's held rather than when it's pressed. In the TrainingRobot project, find the RobotContainer.java file ( src/main/java/frc/robot/RobotContainer.java ). Currently, line 51 contains the method whenPressed() . Refer to the WPILib Javadocs to determine what you need to change whenPressed() to in order to run the command while the button is pressed. Hint controller_X is an instance of the JoystickButton class. In the same project, you'll find the RunMotor.java file in the commands/ directory. In the RunMotor class, the end() method is currently empty. Add code to it that stops the motors. Hint You might want to write something similar to what's in execute() . Once you think you figured it out, follow the above Deploying robot code section again to deploy, and see if your code worked! Solutions RobotContainer.java private void bindIO () { controller_X . whileHeld ( new RunMotor ( motors )); } commands/RunMotor.java @Override public void end ( boolean interrupted ) { motors . run ( 0 ); } Part 2: Default commands \u00b6 Right now, our motor only has two states: half power, or completely off. Let's make the motor's speed correspond to more granular controller input using a joystick. Again in the RobotContainer.java file, modify the bindIO() method to set the default command of the Motors subsystem to the RunMotors command. Hint Get the joystick's Y-value from the XboxController we already have defined. Hint Motors is an implementation of the Subsystem interface. Pass the Motors subsystem into the command and have it drive the motors to the Y-value of the joystick when executed. Use the prewritten code, the command-based programming tutorial , and the WPILib JavaDocs for help. Example Solution This is one way to implement this step. Yours may look a little different, but the same logic should appear here. Robotcontainer.java import edu.wpi.first.wpilibj.GenericHID ; private void bindIO () { motors . setDefaultCommand ( new RunMotor ( motors )); } public static double getMotorSpeed () { // the vertical axis of the left joystick of the XboxController return controller . getY ( GenericHID . Hand . kLeft ); } commands/RunMotor.java import frc.robot.RobotContainer ; @Override public void execute () { motors . run ( RobotContainer . getMotorSpeed ()); } Again, deploy your code to the robot to see if it worked! Once you're satisfied with your changes, read the Git Flow page to push your changes.","title":"Intro to Robot Code"},{"location":"programming/intro-to-robot-code/#setup","text":"In order to write and run robot code, we will need to install a few pieces of software.","title":"Setup"},{"location":"programming/intro-to-robot-code/#wpilib","text":"The WPILib suite installs the IDE we write our code in as well as the tools needed to run and deploy that code to the robot. Follow the instructions on the official WPILib documentation for your respective OS. This will install WPILib and all its required tooling, as well as the VSCode IDE that we use to write code.","title":"WPILib"},{"location":"programming/intro-to-robot-code/#git-and-github","text":"We use Git and Github to keep track of and collaborate on code. Follow the instructions for your respective OS to download Git . If you do not have a Github account, create one now. Once you have your account, tell a programming mentor or programming lead your username so they may add you to our GitHub organization . Next, set up your username (your real name) and email in Git by following these instructions: Setting your username in Git Setting your email address in Git","title":"Git and Github"},{"location":"programming/intro-to-robot-code/#creating-a-robot-project","text":"","title":"Creating a robot project"},{"location":"programming/intro-to-robot-code/#with-vscode","text":"Bring up the Visual Studio Code command palette with Control+Shift+P: Then, type \u201cWPILib\u201d into the prompt. Since all WPILib commands start with \u201cWPILib,\u201d this will bring up the list of WPILib-specific VS Code commands: Now, select the \u201cCreate a new project\u201d command: This will bring up the \u201cNew Project Creator Window:\u201d Some elements we care about are explained below: Project Type : The kind of project we wish to create. Usually we want template . Language : The language (C++ or Java) that will be used for this project. We will be using Java . Project Base : The base class or example to generate the project from. Our team uses Command Robot . You can find the templates here and examples here . Project Location : This determines the folder in which the robot project will be located. Create New Folder : If this is checked, a new folder will be created to hold the project within the previously-specified folder. If it is not checked, the project will be located directly in the previously-specified folder. An error will be thrown if the folder is not empty and this is not checked. You almost always want this to be checked. Project Name : The name of the robot project. This also specifies the name that the project folder will be given if the Create New Folder box is checked. Our code for each year is named with the format Code<year> ie: Code2020 . Team Number : The team number for the project, which will be used for package names within the project and to locate the robot when deploying code. Our team number is 253 . Once all the above have been configured, click \u201cGenerate Project\u201d and the robot project will be created.","title":"With VSCode"},{"location":"programming/intro-to-robot-code/#opening-the-new-project","text":"After successfully creating your project, VS Code will give the option of opening the project as shown below. We can choose to do that now or later by typing Ctrl + K then Ctrl + O (or just Cmd + O on macOS) and select the folder where we saved our project. Once opened, we will see the project hierarchy on the left. Double-clicking on a file will open that file in the editor.","title":"Opening The New Project"},{"location":"programming/intro-to-robot-code/#project-structure","text":"A typical robot project may look like this : Code2020/ \u251c\u2500\u2500 build.gradle \u251c\u2500\u2500 gradle/ \u251c\u2500\u2500 gradlew \u251c\u2500\u2500 gradlew.bat \u251c\u2500\u2500 settings.gradle \u251c\u2500\u2500 src/main/java/frc/robot/ \u2502 \u251c\u2500\u2500 Constants.java \u2502 \u251c\u2500\u2500 Main.java \u2502 \u251c\u2500\u2500 Robot.java \u2502 \u251c\u2500\u2500 RobotContainer.java \u2502 \u251c\u2500\u2500 commands/ \u2502 \u2502 \u251c\u2500\u2500 ConveyorQueue.java \u2502 \u2502 \u251c\u2500\u2500 Drive.java \u2502 \u2502 \u251c\u2500\u2500 Shoot.java \u2502 \u2502 \u2514\u2500\u2500 VisionTrack.java \u2502 \u2514\u2500\u2500 subsystems/ \u2502 \u251c\u2500\u2500 Arm.java \u2502 \u251c\u2500\u2500 Climber.java \u2502 \u251c\u2500\u2500 Conveyor.java \u2502 \u251c\u2500\u2500 Drivetrain.java \u2502 \u251c\u2500\u2500 Intake.java \u2502 \u2514\u2500\u2500 Shooter.java \u2514\u2500\u2500 vendordeps/ \u251c\u2500\u2500 Phoenix.json \u251c\u2500\u2500 REVColorSensorV3.json \u251c\u2500\u2500 REVRobotics.json \u251c\u2500\u2500 WPILibNewCommands.json \u251c\u2500\u2500 WPILibOldCommands.json \u2514\u2500\u2500 navx_frc.json It's a lot, so let's break it down. This is an intro to our robot structure, so we won't go into specifics on how to actually write the code until the next section.","title":"Project Structure"},{"location":"programming/intro-to-robot-code/#gradle","text":"When creating a robot project, Gradle will automatically generate the files build.gradle , gradle/ , gradlew , gradlew.bat , settings.gradle . You shouldn't ever need to touch these. Your IDE may also generate the folders bin/ , build/ , .wpilib/ , .vscode/ , and .idea/ . It's safe to ignore these files as well.","title":"Gradle"},{"location":"programming/intro-to-robot-code/#vendordeps","text":"The vendordeps/ folder in our robot code contains .json files that identify third party libraries we use. You can read more about it here .","title":"vendordeps"},{"location":"programming/intro-to-robot-code/#src","text":"Just like any other Java project, the src/ directory holds all of our actual code. src/main/java/frc/robot/ \u251c\u2500\u2500 Constants.java \u251c\u2500\u2500 Main.java \u251c\u2500\u2500 Robot.java \u251c\u2500\u2500 RobotContainer.java \u251c\u2500\u2500 commands/ \u2502 \u251c\u2500\u2500 ConveyorQueue.java \u2502 \u251c\u2500\u2500 Drive.java \u2502 \u251c\u2500\u2500 Shoot.java \u2502 \u2514\u2500\u2500 VisionTrack.java \u2514\u2500\u2500 subsystems/ \u251c\u2500\u2500 Arm.java \u251c\u2500\u2500 Climber.java \u251c\u2500\u2500 Conveyor.java \u251c\u2500\u2500 Drivetrain.java \u251c\u2500\u2500 Intake.java \u2514\u2500\u2500 Shooter.java","title":"src"},{"location":"programming/intro-to-robot-code/#mainjava","text":"This file is autogenerated, and there is rarely any reason to touch this file at all. It contains the classic main method, which is run at startup and starts up the rest of the robot code.","title":"Main.java"},{"location":"programming/intro-to-robot-code/#robotjava","text":"This file is the control center of the robot. It has the methods that are called to run the robot. Documentation on each of the methods within it can be found here .","title":"Robot.java"},{"location":"programming/intro-to-robot-code/#constantsjava","text":"This file contains all the numbers that don't change and are relevant to the whole robot. This includes all ports and joystick buttons, which correlate to motor controllers, solenoids, and commands in the code.","title":"Constants.java"},{"location":"programming/intro-to-robot-code/#robotcontainerjava","text":"This is where we create and store the objects for the subsystems, and set up all the controller and joystick commands that the driver uses to operate the robot. It does not extend from any superclasses, and is mainly used as a way to separate code from Robot.java","title":"RobotContainer.java"},{"location":"programming/intro-to-robot-code/#commands","text":"Commands are what run the robot. For example, there may be a RunIntake command that runs two motors to turn the wheels that intake a game piece.","title":"commands/"},{"location":"programming/intro-to-robot-code/#subsystems","text":"Subsystems are another name for robot mechanisms, such as a drivetrain, a shooter, an intake, or a climber. The subsystem classes contain the Objects for the motor controllers and solenoids and have methods for controlling the subsystem, which are used by commands.","title":"subsystems/"},{"location":"programming/intro-to-robot-code/#deploying-code-to-the-robot","text":"Note Deploying code to the RoboRIO only works on a Windows computer; however, you can still build your code to see if it compiles correctly. Now that you've created a robot project, you may want to deploy your code to the robot. In order to do this you'll need a few things: A Windows computer with the driver station software installed A RoboRIO connected to an electronics board (radio optional) and a battery If you do not have the radio, have a USB-B cable handy to connect your computer to the RIO With the radio: Disconnect from your wifi network and connect to the radio's wifi network. Without the radio: Plug the computer into the RoboRIO using a USB-B cable. Now that you're connected, it's time to actually deploy your code. Follow the WPILib instructions to deploy your code to the robot.","title":"Deploying code to the robot"},{"location":"programming/intro-to-robot-code/#writing-robot-code","text":"Now you know how to deploy your code. Let's learn how to interact with physical components of the robot.","title":"Writing robot code"},{"location":"programming/intro-to-robot-code/#javadocs","text":"Java has a standard documentation format that is autogenerated from documentation comments in the code. We will be referencing them extensively to write our code. On top of a Javadoc contains a description of the class, its package, what it inherits, and more. Below that is a section containing the class' constructors, and the section below contains the methods you can call from that class. If you click on any of the constructors or methods, you get directed to a section with more details about what you clicked. Here's a Javadoc of a class you should be familiar with: ArrayList .","title":"Javadocs"},{"location":"programming/intro-to-robot-code/#wpilib_1","text":"WPILib is the name of the library FRC provides us to control the robot with. Its JavaDocs are located here (and you can also find a link to them in the Resources page of this site). We will be mostly using the library's edu.wpi.first.wpilibj package, and you can search for a class or method using the search bar located in the top right corner of the javadocs page.","title":"WPILib"},{"location":"programming/intro-to-robot-code/#practice","text":"First has a pretty good write-up on command-based programming , so we'll read that. Once you're done, we'll practice writing some basic commands. Before you start If you have access to a robot and would like to test your code, you will need the following items: items from the previous section an Xbox controller a Talon SRX a brushless motor Ask your teammates in the electronics department for help :) If you are new to git, read the intro to git section before proceeding. Clone the TrainingRobot project , and open it in VSCode. You can check if you have got the right project open by deploying the project to the robot and pressing the X button on the controller. If the motor spins, you've got the right code! Note VSCode may prompt you to \"import project to 2020\". Don't do this. Warning Please don't actually push any of your changes to the Github repository.","title":"Practice"},{"location":"programming/intro-to-robot-code/#part-1-basic-io","text":"Let's change the button to trigger the command continuously while it's held rather than when it's pressed. In the TrainingRobot project, find the RobotContainer.java file ( src/main/java/frc/robot/RobotContainer.java ). Currently, line 51 contains the method whenPressed() . Refer to the WPILib Javadocs to determine what you need to change whenPressed() to in order to run the command while the button is pressed. Hint controller_X is an instance of the JoystickButton class. In the same project, you'll find the RunMotor.java file in the commands/ directory. In the RunMotor class, the end() method is currently empty. Add code to it that stops the motors. Hint You might want to write something similar to what's in execute() . Once you think you figured it out, follow the above Deploying robot code section again to deploy, and see if your code worked! Solutions RobotContainer.java private void bindIO () { controller_X . whileHeld ( new RunMotor ( motors )); } commands/RunMotor.java @Override public void end ( boolean interrupted ) { motors . run ( 0 ); }","title":"Part 1: Basic IO"},{"location":"programming/intro-to-robot-code/#part-2-default-commands","text":"Right now, our motor only has two states: half power, or completely off. Let's make the motor's speed correspond to more granular controller input using a joystick. Again in the RobotContainer.java file, modify the bindIO() method to set the default command of the Motors subsystem to the RunMotors command. Hint Get the joystick's Y-value from the XboxController we already have defined. Hint Motors is an implementation of the Subsystem interface. Pass the Motors subsystem into the command and have it drive the motors to the Y-value of the joystick when executed. Use the prewritten code, the command-based programming tutorial , and the WPILib JavaDocs for help. Example Solution This is one way to implement this step. Yours may look a little different, but the same logic should appear here. Robotcontainer.java import edu.wpi.first.wpilibj.GenericHID ; private void bindIO () { motors . setDefaultCommand ( new RunMotor ( motors )); } public static double getMotorSpeed () { // the vertical axis of the left joystick of the XboxController return controller . getY ( GenericHID . Hand . kLeft ); } commands/RunMotor.java import frc.robot.RobotContainer ; @Override public void execute () { motors . run ( RobotContainer . getMotorSpeed ()); } Again, deploy your code to the robot to see if it worked! Once you're satisfied with your changes, read the Git Flow page to push your changes.","title":"Part 2: Default commands"},{"location":"programming/learn-java/","text":"Hi. Welcome to the Programming section of the BobaDocs! Before you get started, let me just say this: We are moving at a significantly faster pace than any computer science course offered at the school, and it's okay to get stuck or not know something. The Programming team veterans are here to help, please ask us questions ! This is pretty difficult stuff, but I guarantee that it will be worth it and that we'll make it through together. Learning Java \u00b6 Java is the programming language used by most FRC teams to program their robot. Other languages include C++ and Python. For the sake of convenience, our team writes our robot code in Java. If you are not yet proficient enough to pass the AP Computer Science A exam , you should take the Codecademy Java course found here: https://www.codecademy.com/learn/learn-java . This course will walk you through the basics of Java and Object-Oriented Programming that you will need for FRC programming. It will take approximately three weeks, split up into the following sections: Week 1: Hello World Variables and Data Types Object-Oriented Java Week 2: Conditionals and Control Flow Arrays and ArrayLists Loops Week 3: (Optional) String methods Inheritance and Polymorphism Debugging Warning Do not do the \"Pro\" sections; they're not necessary and will slow you down. Java Learning Resources \u00b6 Official documentation \u00b6 Official tutorial For complete beginners to programming \u00b6 APCS Textbook Free Codecademy Java course A playlist of YouTube videos on Java For people who know programming already \u00b6 https://learnxinyminutes.com/docs/java/ Java Curriculum Review by Jakin Chan Exercises (practice makes better) \u00b6 https://practiceit.cs.washington.edu/ https://www.codewars.com/?language=java https://codingbat.com/java","title":"Introduction"},{"location":"programming/learn-java/#learning-java","text":"Java is the programming language used by most FRC teams to program their robot. Other languages include C++ and Python. For the sake of convenience, our team writes our robot code in Java. If you are not yet proficient enough to pass the AP Computer Science A exam , you should take the Codecademy Java course found here: https://www.codecademy.com/learn/learn-java . This course will walk you through the basics of Java and Object-Oriented Programming that you will need for FRC programming. It will take approximately three weeks, split up into the following sections: Week 1: Hello World Variables and Data Types Object-Oriented Java Week 2: Conditionals and Control Flow Arrays and ArrayLists Loops Week 3: (Optional) String methods Inheritance and Polymorphism Debugging Warning Do not do the \"Pro\" sections; they're not necessary and will slow you down.","title":"Learning Java"},{"location":"programming/learn-java/#java-learning-resources","text":"","title":"Java Learning Resources"},{"location":"programming/learn-java/#official-documentation","text":"Official tutorial","title":"Official documentation"},{"location":"programming/learn-java/#for-complete-beginners-to-programming","text":"APCS Textbook Free Codecademy Java course A playlist of YouTube videos on Java","title":"For complete beginners to programming"},{"location":"programming/learn-java/#for-people-who-know-programming-already","text":"https://learnxinyminutes.com/docs/java/ Java Curriculum Review by Jakin Chan","title":"For people who know programming already"},{"location":"programming/learn-java/#exercises-practice-makes-better","text":"https://practiceit.cs.washington.edu/ https://www.codewars.com/?language=java https://codingbat.com/java","title":"Exercises (practice makes better)"},{"location":"programming/resources/","text":"Team Resources \u00b6 Boba Bots Github WPILib \u00b6 WPILib provides the core libraries for creating robot programs with the roboRIO. WPILib uses Gradle to build and deploy code. Info FRC Robots will transition to a new robot controller for the 2021 season, developed by REV Robotics. This may significantly change the way you interact with the controller. WPILib Docs WPILib Github/Example Code WPILib Java Docs CTRE \u00b6 CTRE provides various electrical components and software libraries for FRC (e.g. TalonSRX, Falcon 500, CANifier, Phoenix Tuner). Software downloads can be found under the technical resources section of their respective product page. Product Website CTRE Phoenix Docs CTRE Java Docs Github/Example Code REV Robotics \u00b6 REV Robotics provides various electrical components and software libraries for FRC (e.g. SPARK MAX, NEOs, Through-bore Encoder). Note that REV Robotics provides documentation on a part by part basis, rather than centralizing their documentation. Product Website SPARK MAX Documentation REV Documentation REV Examples REV Java Docs Miscellaneous \u00b6 navX(Gyroscope) PathWeaver(Autonomous) Limelight(Vision) PID Demo Scouting Web-App(WIP) Demo","title":"Resources"},{"location":"programming/resources/#team-resources","text":"Boba Bots Github","title":"Team Resources"},{"location":"programming/resources/#wpilib","text":"WPILib provides the core libraries for creating robot programs with the roboRIO. WPILib uses Gradle to build and deploy code. Info FRC Robots will transition to a new robot controller for the 2021 season, developed by REV Robotics. This may significantly change the way you interact with the controller. WPILib Docs WPILib Github/Example Code WPILib Java Docs","title":"WPILib"},{"location":"programming/resources/#ctre","text":"CTRE provides various electrical components and software libraries for FRC (e.g. TalonSRX, Falcon 500, CANifier, Phoenix Tuner). Software downloads can be found under the technical resources section of their respective product page. Product Website CTRE Phoenix Docs CTRE Java Docs Github/Example Code","title":"CTRE"},{"location":"programming/resources/#rev-robotics","text":"REV Robotics provides various electrical components and software libraries for FRC (e.g. SPARK MAX, NEOs, Through-bore Encoder). Note that REV Robotics provides documentation on a part by part basis, rather than centralizing their documentation. Product Website SPARK MAX Documentation REV Documentation REV Examples REV Java Docs","title":"REV Robotics"},{"location":"programming/resources/#miscellaneous","text":"navX(Gyroscope) PathWeaver(Autonomous) Limelight(Vision) PID Demo Scouting Web-App(WIP) Demo","title":"Miscellaneous"},{"location":"programming/version-control/","text":"So you know how to write Java code, and you know the basics of how our robot code is written. Now, you might be wondering, how do we collaborate and write code as a team? Surely, we don't take turns passing around a computer to type in our lines. Enter version control. Here's a handy article about it . Stop at the steps, you don't need to do them. Once you're done, we'll do some exercises to see if you've got it. Note We'll be using VS Code's built-in version control tools in this tutorial , but there are many other good tools too, including Sourcetree , Github Desktop , Gitkraken , and of course, the ol' command line. You don't need to know how to use the command line for FRC, but it's a useful, if not essential, skill if you want to go beyond. Practice \u00b6 VS Code is the text editor we will be using to write and run our code, and should have been installed with the WPILib suite during setup. Open up VS Code and follow the \"Cloning a repository\" section of the VS Code git tutorial to clone this repo . Navigate to this file in the repo ( docs/programming/version-control.md ) and add your name to the list below. People who have added their name Sebastian Law, Nathan Choi , William Bruce, Now stage and commit your changes with the message add [your name] , and then push your changes. Refer to the Git tutorial and VS Code tutorial if needed. Tip By convention, commit names are in simple present tense. Things like add name or fix these bugs or update readme . You are expected to write descriptive commit messages that follow this convention.","title":"Intro to Git & Github"},{"location":"programming/version-control/#practice","text":"VS Code is the text editor we will be using to write and run our code, and should have been installed with the WPILib suite during setup. Open up VS Code and follow the \"Cloning a repository\" section of the VS Code git tutorial to clone this repo . Navigate to this file in the repo ( docs/programming/version-control.md ) and add your name to the list below. People who have added their name Sebastian Law, Nathan Choi , William Bruce, Now stage and commit your changes with the message add [your name] , and then push your changes. Refer to the Git tutorial and VS Code tutorial if needed. Tip By convention, commit names are in simple present tense. Things like add name or fix these bugs or update readme . You are expected to write descriptive commit messages that follow this convention.","title":"Practice"},{"location":"troubleshooting/common-issues/","text":"Common Issues \u00b6 Below are common issues programmers face, sorted by problem type. Use the table of contents to navigate. Restart Code, electronics, and the robot can randomly stop working for no apparent reason. Consider restarting your computer, code, robot, or other components before attempting more intrusive troubleshootting steps. Software Updates The issue you found might be a commonly reported bug and has already been fixed in the latest version. Check the manufacturer's github or website to view the changelog and update. Robot Operation \u00b6 Packet Loss \u00b6 Issue: Loss of control of robot (jerkiness); significant delay between joystick input and corresponding action; sudden robot movements when no input is being applied. The Driver Station log file reports packet loss with orange bars with respect to time. img { display: block; margin-left: auto; margin-right: auto; } Cause: Lost communication packets between your computer/FMS and your robot's radio and roboRIO. Additionally, your robot could have lost power for a brief period before reconnecting. Solution: During Competition Matches: Contact the field FTA/FTAA for assistance All other situations: Reduce surrounding wireless interference (hotspots/Wifi APs) Switch to a wired connection via USB or Ethernet Make sure the driver station laptop's battery mode is set to Performance and not Battery Saver Check power/data connections between radio and VRM, radio and roboRIO, battery to VRM, and battery to roboRIO Check that the ethernet port the router is connected to is not loose (consider hotgluing the connection for competition) Restart router/roboRIO Check for your code. Certain processes can lead to high packet loss. Common culprits include USB Cameras, badly configured PID loops, logging functions, etc. It's likely that the periodic() loop is taking longer than 20ms to execute No Communication \u00b6 Programming \u00b6 startcompetiton() \u00b6 Limelight \u00b6 PID \u00b6 CAN \u00b6 Electrical \u00b6 Battery \u00b6 Issue: Robot is browning out and/or behaving erratically when running the robot. Cause: Low battery voltage or worn out battery. Alternatively, a motor is stalling. Solution: Replace the battery with a fresh one from the battery charging station. Use a battery beak to check charge % (Full Charge is 130%) and battery resistance. Battery Tips Full Charge: 130% (Anything over 115% should be enough) Lower internal battery resistance is better (<0.025 ohm) Check the Driver Station Log File for diagnostic information for battery voltage and power delivery via the PDP Use separate batteries for competition and practice/testing Compressor \u00b6 Issue: Compressor refusing to run even after checking the wiring and pneumatic system. Solution: Make sure that the default compressor settings are not being overridden. Specifically, check that compressor.stop() is not present, as this will disable the automatic pressure control of the Pneumatics Control Module (PCM) Compressors do not need to be instantiated to function at a basic level. Refer to the Java Docs to learn about advanced compressor functionality.","title":"Common Issues"},{"location":"troubleshooting/common-issues/#common-issues","text":"Below are common issues programmers face, sorted by problem type. Use the table of contents to navigate. Restart Code, electronics, and the robot can randomly stop working for no apparent reason. Consider restarting your computer, code, robot, or other components before attempting more intrusive troubleshootting steps. Software Updates The issue you found might be a commonly reported bug and has already been fixed in the latest version. Check the manufacturer's github or website to view the changelog and update.","title":"Common Issues"},{"location":"troubleshooting/common-issues/#robot-operation","text":"","title":"Robot Operation"},{"location":"troubleshooting/common-issues/#packet-loss","text":"Issue: Loss of control of robot (jerkiness); significant delay between joystick input and corresponding action; sudden robot movements when no input is being applied. The Driver Station log file reports packet loss with orange bars with respect to time. img { display: block; margin-left: auto; margin-right: auto; } Cause: Lost communication packets between your computer/FMS and your robot's radio and roboRIO. Additionally, your robot could have lost power for a brief period before reconnecting. Solution: During Competition Matches: Contact the field FTA/FTAA for assistance All other situations: Reduce surrounding wireless interference (hotspots/Wifi APs) Switch to a wired connection via USB or Ethernet Make sure the driver station laptop's battery mode is set to Performance and not Battery Saver Check power/data connections between radio and VRM, radio and roboRIO, battery to VRM, and battery to roboRIO Check that the ethernet port the router is connected to is not loose (consider hotgluing the connection for competition) Restart router/roboRIO Check for your code. Certain processes can lead to high packet loss. Common culprits include USB Cameras, badly configured PID loops, logging functions, etc. It's likely that the periodic() loop is taking longer than 20ms to execute","title":"Packet Loss"},{"location":"troubleshooting/common-issues/#no-communication","text":"","title":"No Communication"},{"location":"troubleshooting/common-issues/#programming","text":"","title":"Programming"},{"location":"troubleshooting/common-issues/#startcompetiton","text":"","title":"startcompetiton()"},{"location":"troubleshooting/common-issues/#limelight","text":"","title":"Limelight"},{"location":"troubleshooting/common-issues/#pid","text":"","title":"PID"},{"location":"troubleshooting/common-issues/#can","text":"","title":"CAN"},{"location":"troubleshooting/common-issues/#electrical","text":"","title":"Electrical"},{"location":"troubleshooting/common-issues/#battery","text":"Issue: Robot is browning out and/or behaving erratically when running the robot. Cause: Low battery voltage or worn out battery. Alternatively, a motor is stalling. Solution: Replace the battery with a fresh one from the battery charging station. Use a battery beak to check charge % (Full Charge is 130%) and battery resistance. Battery Tips Full Charge: 130% (Anything over 115% should be enough) Lower internal battery resistance is better (<0.025 ohm) Check the Driver Station Log File for diagnostic information for battery voltage and power delivery via the PDP Use separate batteries for competition and practice/testing","title":"Battery"},{"location":"troubleshooting/common-issues/#compressor","text":"Issue: Compressor refusing to run even after checking the wiring and pneumatic system. Solution: Make sure that the default compressor settings are not being overridden. Specifically, check that compressor.stop() is not present, as this will disable the automatic pressure control of the Pneumatics Control Module (PCM) Compressors do not need to be instantiated to function at a basic level. Refer to the Java Docs to learn about advanced compressor functionality.","title":"Compressor"},{"location":"troubleshooting/problemsolving/","text":"Troubleshooting \u00b6 In robotics, troubleshooting is a crucial part in insuring that your code, electronics, and design performs as expected. As a result, its important to use problem-solving skills to identify, understand, and rectify various bugs and hitches that will undoubtedly occur. As you build systems that are increasingly complex, a methodology for troubleshooting should be followed to decrease time wasted and frustration. Below are steps that one should consider while troubleshooting: Identify the source of the issue. Problems can arise from all sorts of places, whether it be programming, electrical, mechanical, or a combination of them all. Like diagnosing a patient, you should find what's causing the symptoms (problems) to manifest themselves. Re-creating the issue can be helpful, espeically when the problem is programming related. Create a backup before making any changes, just in case something goes wrong. Establish a theory of probable cause. Once a problem has been identified, establish a ranked list of probable causes based on information gathered and your own technical knowledge. The way subteams are divided makes it essential to work together with others within and outside the programming subteam. Don't Tunnel Vision. It's easy to overlook the most elementary problems when working with complex systems. Test your theory to determine that actual cause. Go through the list of probable causes and test them to determine the true underlying issue. Issue a Fix. Develop and execute an appropriate fix to the issue. Verify functionality. Ensure the problem has been resolved and the system performs as designed. Side effects should be minimized. Implement measures to prevent the issue from happening again. Document the issue and process. Chances are the issue will pop up again. Documenting the process and issue allows others to quickly resolve the issue without frustration. This can save time during future troubleshooting and prevent others from taking the same missteps you may have taken. Tip Add your documented issues to the [placeholder] common issues page for others to reference. Additional Resources: Guide to Debugging Things by Eric Xiao WPILIB Debugging a Robot Program","title":"Introduction"},{"location":"troubleshooting/problemsolving/#troubleshooting","text":"In robotics, troubleshooting is a crucial part in insuring that your code, electronics, and design performs as expected. As a result, its important to use problem-solving skills to identify, understand, and rectify various bugs and hitches that will undoubtedly occur. As you build systems that are increasingly complex, a methodology for troubleshooting should be followed to decrease time wasted and frustration. Below are steps that one should consider while troubleshooting: Identify the source of the issue. Problems can arise from all sorts of places, whether it be programming, electrical, mechanical, or a combination of them all. Like diagnosing a patient, you should find what's causing the symptoms (problems) to manifest themselves. Re-creating the issue can be helpful, espeically when the problem is programming related. Create a backup before making any changes, just in case something goes wrong. Establish a theory of probable cause. Once a problem has been identified, establish a ranked list of probable causes based on information gathered and your own technical knowledge. The way subteams are divided makes it essential to work together with others within and outside the programming subteam. Don't Tunnel Vision. It's easy to overlook the most elementary problems when working with complex systems. Test your theory to determine that actual cause. Go through the list of probable causes and test them to determine the true underlying issue. Issue a Fix. Develop and execute an appropriate fix to the issue. Verify functionality. Ensure the problem has been resolved and the system performs as designed. Side effects should be minimized. Implement measures to prevent the issue from happening again. Document the issue and process. Chances are the issue will pop up again. Documenting the process and issue allows others to quickly resolve the issue without frustration. This can save time during future troubleshooting and prevent others from taking the same missteps you may have taken. Tip Add your documented issues to the [placeholder] common issues page for others to reference. Additional Resources: Guide to Debugging Things by Eric Xiao WPILIB Debugging a Robot Program","title":"Troubleshooting"}]}